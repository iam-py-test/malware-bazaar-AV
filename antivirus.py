import os
import requests
import hashlib

# get the folder to scan
floc = input("Enter a directory to scan: ")
# the total threats detected
detected = []
# the number of threats which could not be removed
removefailed = []
# the total number of files scanned
filescanned = 0
# how many files could not be scanned (i.e. system files) - this may need to be removed as to avoid scaring the user
totalfail = 0

try:
	# fetch the hashes. To prevent overloading MB's servers, the list is mirrored on GH
	hashes = requests.get("https://raw.githubusercontent.com/iam-py-test/malware-bazaar-AV/main/full_sha256.txt").text.split("\r\n")
	# scan the folder specified by the user
	for root,dirs,files in os.walk(floc):
		for file in files:
			filescanned += 1
			try:
				hash = hashlib.sha256(open(os.path.join(root,file),"rb").read()).hexdigest()
				if hash in hashes:
					detected.append(os.path.join(root,file))
			except Exception as err:
				# should add debug mode soon
				totalfail += 1
except:
	# if it crashes or is Control-C-ed, go to the end screen
	pass

# output the data
print("\n\n{} files scanned\n{} files were unable to be scanned\n{} threats detected".format(filescanned,totalfail,len(detected)))
print("Threats detected: ")
for d in detected:
	# print each detected file
	print(d)
if len(detected) > 0:
	if input("Remove threats? (y/n) ") == "y":
		for d in detected:
			try:
				os.remove(d)
			except:
				removefailed.append(d)
		if len(removefailed) > 0:
			print("\nThe following threats could not be removed: ")
			for t in removefailed:
				print(t)
# prevent it from silently closing
input("Press enter to end: ")
